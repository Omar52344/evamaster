{"version":3,"sources":["containers/navs/Breadcrumb.js","components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","containers/wizard/Basic.js","containers/wizard/LastStepEnd.js","containers/wizard/TopNavDisabled.js","containers/wizard/Validation.js","containers/wizard/Layouts.js","views/app/ui/forms/wizard.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","x","className","map","key","active","to","BreadcrumbContainer","heading","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","render","next","previous","step","steps","Button","color","onClick","TopNavigation","disableNav","topNavClick","getClassName","stepItem","isDone","push","go","hideTopNav","location","itemClick","name","desc","injectIntl","intl","useState","setName","email","setEmail","password","setPassword","messages","Card","CardBody","Form","FormGroup","Label","IntlMessages","Input","type","placeholder","value","onChange","e","target","goToNext","goToPrev","bottomNavHidden","setBottomNavHidden","topNavDisabled","setTopNavDisabled","validateEmail","error","test","validateName","validatePassword","forms","createRef","loading","setLoading","valid","fields","setFields","innerRef","initialValues","onSubmit","errors","touched","validate","Spinner","formIndex","form","current","submitForm","then","newFields","values","setTimeout","Row","xxs","xl","FormWizard","Breadcrumb"],"mappings":"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","file":"static/js/forms-wizard.67ff03b3.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if('/'+sub===adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub, index) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/');\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { Button } from 'reactstrap';\n\nconst BottomNavigation = ({\n  className,\n  onClickPrev,\n  prevLabel,\n  onClickNext,\n  nextLabel,\n}) => {\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps }) => (\n        <div className={`wizard-buttons ${className}`}>\n          <Button\n            color=\"primary\"\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\n            onClick={() => {\n              onClickPrev(previous, steps, step);\n            }}\n          >\n            {prevLabel}\n          </Button>\n\n          <Button\n            color=\"primary\"\n            className={\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\n            }\n            onClick={() => {\n              onClickNext(next, steps, step);\n            }}\n          >\n            {nextLabel}\n          </Button>\n        </div>\n      )}\n    />\n  );\n};\nexport default BottomNavigation;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { NavLink } from 'react-router-dom';\n\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\n  const getClassName = (steps, step, index, stepItem) => {\n    if (steps.indexOf(step) === index) {\n      return 'step-doing';\n    }\n    if (steps.indexOf(step) > index || stepItem.isDone) {\n      stepItem.isDone = true;\n      return 'step-done';\n    }\n    return 'step';\n  };\n\n  const itemClick = (stepItem, push) => {\n    if (disableNav) {\n      return;\n    }\n    topNavClick(stepItem, push);\n  };\n\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps, go, push }) => (\n        <ul\n          className={`nav nav-tabs ${className}${\n            disableNav ? ' disabled' : ''\n          }`}\n        >\n          {steps.map((stepItem, index) => {\n            if (!stepItem.hideTopNav) {\n              return (\n                <li\n                  key={`topNavStep_${index}`}\n                  className={`nav-item ${getClassName(\n                    steps,\n                    step,\n                    index,\n                    stepItem\n                  )}`}\n                >\n                  <NavLink\n                    to=\"#\"\n                    location={{}}\n                    className=\"nav-link\"\n                    onClick={() => itemClick(stepItem, push)}\n                  >\n                    <span>{stepItem.name}</span>\n                    <small>{stepItem.desc}</small>\n                  </NavLink>\n                </li>\n              );\n            }\n            return <span key={`topNavStep_${index}`} />;\n          })}\n        </ul>\n      )}\n    />\n  );\n};\n\nexport default TopNavigation;\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst Basic = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav={false}\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className=\"justify-content-center\"\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(Basic);\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst LastStepEnd = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\n  const [topNavDisabled, setTopNavDisabled] = useState(false);\n\n  const topNavClick = (stepItem, push) => {\n    if (topNavDisabled) {\n      return;\n    }\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 2 <= steps.indexOf(step)) {\n      setBottomNavHidden(true);\n      setTopNavDisabled(true);\n    }\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav={false}\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className={`justify-content-center ${\n              bottomNavHidden && 'invisible'\n            }`}\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(LastStepEnd);\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst TopNavDisabled = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className=\"justify-content-center\"\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default injectIntl(TopNavDisabled);\n","/* eslint-disable no-param-reassign */\nimport React, { createRef, useState } from 'react';\nimport { Card, CardBody, FormGroup, Label, Spinner } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport { Formik, Form, Field } from 'formik';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst validateName = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your name';\n  } else if (value.length < 2) {\n    error = 'Value must be longer than 2 characters';\n  }\n  return error;\n};\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 6) {\n    error = 'Password must be longer than 6 characters';\n  }\n  return error;\n};\n\nconst Validation = ({ intl }) => {\n  const forms = [createRef(null), createRef(null), createRef(null)];\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [fields, setFields] = useState([\n    {\n      valid: false,\n      name: 'name',\n      value: '',\n    },\n    {\n      valid: false,\n      name: 'email',\n      value: '',\n    },\n    {\n      valid: false,\n      name: 'password',\n      value: '',\n    },\n  ]);\n\n  const asyncLoading = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    const formIndex = steps.indexOf(step);\n    const form = forms[formIndex].current;\n    const { name } = fields[formIndex];\n    form.submitForm().then(() => {\n      const newFields = [...fields];\n\n      newFields[formIndex].value = form.values[name];\n      newFields[formIndex].valid = !form.errors[name];\n      setFields(newFields);\n\n      if (!form.errors[name] && form.touched[name]) {\n        goToNext();\n        step.isDone = true;\n        if (steps.length - 2 <= steps.indexOf(step)) {\n          setBottomNavHidden(true);\n          asyncLoading();\n        }\n      }\n    });\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation className=\"justify-content-center\" disableNav />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[0]}\n                  initialValues={{\n                    name: fields[0].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right\">\n                      <FormGroup>\n                        <Label>{messages['forms.name']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"name\"\n                          validate={validateName}\n                        />\n                        {errors.name && touched.name && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.name}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[1]}\n                  initialValues={{\n                    email: fields[1].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right\">\n                      <FormGroup>\n                        <Label>{messages['forms.email']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"email\"\n                          validate={validateEmail}\n                        />\n                        {errors.email && touched.email && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.email}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[2]}\n                  initialValues={{\n                    password: fields[2].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right error-l-75\">\n                      <FormGroup>\n                        <Label>{messages['forms.password']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"password\"\n                          type=\"password\"\n                          validate={validatePassword}\n                        />\n                        {errors.password && touched.password && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.password}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center pt-3\">\n                {loading ? (\n                  <div>\n                    <Spinner color=\"primary\" className=\"mb-1\" />\n                    <p>\n                      <IntlMessages id=\"wizard.async\" />\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.registered\" />\n                    </p>\n                  </div>\n                )}\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className={`justify-content-center ${\n              bottomNavHidden && 'invisible'\n            }`}\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(Validation);\n","/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { Card, CardBody, Row } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\nimport { Colxx } from '../../components/common/CustomBootstrap';\n\nconst Layouts = ({ intl }) => {\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Row>\n      <Colxx xxs=\"12\" xl=\"6\" className=\"mb-5\">\n        <Card>\n          <CardBody className=\"wizard wizard-default\">\n            <Wizard>\n              <TopNavigation\n                className=\"justify-content-between\"\n                disableNav={false}\n                topNavClick={topNavClick}\n              />\n              <Steps>\n                <Step\n                  id=\"step1\"\n                  name={messages['wizard.step-name-1']}\n                  desc={messages['wizard.step-desc-1']}\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-1\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step2\"\n                  name={messages['wizard.step-name-2']}\n                  desc={messages['wizard.step-desc-2']}\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-2\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step3\"\n                  name={messages['wizard.step-name-3']}\n                  desc={messages['wizard.step-desc-3']}\n                  hideTopNav\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.content-3\" />\n                    </p>\n                  </div>\n                </Step>\n              </Steps>\n              <BottomNavigation\n                onClickNext={onClickNext}\n                onClickPrev={onClickPrev}\n                className=\"justify-content-between\"\n                prevLabel={messages['wizard.prev']}\n                nextLabel={messages['wizard.next']}\n              />\n            </Wizard>\n          </CardBody>\n        </Card>\n      </Colxx>\n      <Colxx xxs=\"12\" xl=\"6\">\n        <Card>\n          <CardBody className=\"wizard wizard-default\">\n            <Wizard>\n              <TopNavigation\n                className=\"justify-content-start\"\n                disableNav={false}\n                topNavClick={topNavClick}\n              />\n              <Steps>\n                <Step\n                  id=\"step1\"\n                  name={messages['wizard.step-name-1']}\n                  desc={messages['wizard.step-desc-1']}\n                >\n                  <div className=\"wizard-basic-step\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-1\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step2\"\n                  name={messages['wizard.step-name-2']}\n                  desc={messages['wizard.step-desc-2']}\n                >\n                  <div className=\"wizard-basic-step\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-2\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step3\"\n                  name={messages['wizard.step-name-3']}\n                  desc={messages['wizard.step-desc-3']}\n                  hideTopNav\n                >\n                  <div className=\"wizard-basic-step\">\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.content-3\" />\n                    </p>\n                  </div>\n                </Step>\n              </Steps>\n              <BottomNavigation\n                onClickNext={onClickNext}\n                onClickPrev={onClickPrev}\n                className=\"justify-content-start\"\n                prevLabel={messages['wizard.prev']}\n                nextLabel={messages['wizard.next']}\n              />\n            </Wizard>\n          </CardBody>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\nexport default injectIntl(Layouts);\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  Colxx,\n  Separator,\n} from '../../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../../containers/navs/Breadcrumb';\nimport Basic from '../../../../containers/wizard/Basic';\nimport LastStepEnd from '../../../../containers/wizard/LastStepEnd';\nimport TopNavDisabled from '../../../../containers/wizard/TopNavDisabled';\nimport Validation from '../../../../containers/wizard/Validation';\nimport Layouts from '../../../../containers/wizard/Layouts';\n\nconst FormWizard = ({ match }) => {\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.form-wizard\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n      <Row>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Basic</h5>\n          <Basic />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Last Step End</h5>\n          <LastStepEnd />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Top Navigation Disabled</h5>\n          <TopNavDisabled />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Validation</h5>\n          <Validation />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Layouts</h5>\n          <Layouts />\n        </Colxx>\n      </Row>\n    </>\n  );\n};\nexport default FormWizard;\n"],"sourceRoot":""}